require 'rspec'

require './models/board.rb'
require './models/cell.rb'

describe 'Game of Life' do
	let(:board) { Board.new }

	describe 'methods' do
		subject { Cell.new(board) }
		it 'create a new relative to' do
			cell = subject.create_at(3, 5)
			expect(cell.is_a?(Cell)).to be true
			expect(cell.x).to eq(3)
			expect(cell.y).to eq(5)
      		expect(cell.board).to eq(subject.board)
		end

		specify 'creates an alive cell  (explicit)' do
			cell = subject.create_at(0, -1, subject.alive)
			expect(cell).to be_alive
		end

		specify 'creates an alive cell (implicit)' do
			cell = subject.create_at(0, -1)
			expect(cell).to be_alive
		end

		specify 'creates a dead cell' do
			cell = subject.create_at(0, -1, subject.dead)
			expect(cell).to be_dead
		end

		specify 'filter only alive cells' do
			cell = subject.create_at(0, -1, subject.alive)	# alive cell
			cell = subject.create_at(1, 1, subject.dead)	# dead cell
      		expect(subject.neighbours.count).to eq(1)
			board.cells.select{|cell| cell.alive?}
		end

		specify 'filter only dead cells' do
			cell = subject.create_at(0, -1, subject.alive)	# alive cell
			cell = subject.create_at(1, 1, subject.dead)	# dead cell
      		expect(subject.neighbours.count).to eq(1)
			board.cells.select{|cell| cell.dead?}
		end

		specify 'check for a cell on its N' do
			cell = subject.create_at(0, 1, subject.alive)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its NE' do
			cell = subject.create_at(1, 1)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its NW' do
			cell = subject.create_at(-1, 1)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its W' do
			cell = subject.create_at(-1, 0)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its E' do
			cell = subject.create_at(1, 0)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its S' do
			cell = subject.create_at(0, -1)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its SE' do
			cell = subject.create_at(1, -1)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'check for a cell on its SW' do
			cell = subject.create_at(-1, -1)
      		expect(subject.neighbours.count).to eq(1)
		end

		specify 'when a cell dies' do
			subject.die
      		expect(subject.state).to eq(subject.dead)
		end

		specify 'when a cell relives' do
			subject.relive
      		expect(subject.state).to eq(subject.alive)
		end

		specify 'more than 3 neighbours' do
			cell_1 = subject.create_at(1,0)
			cell_2 = subject.create_at(-1, 0)
			cell_3 = subject.create_at(-1, 1)
			cell_4 = subject.create_at(1, 1)
	    	expect(subject.neighbours.count).to eq(4)
		end
	end

	specify 'Rule #1: Any live cell with fewer than two live neighbours dies' do
		cell = Cell.new(board)
		cell_1 = cell.create_at(2,0)
		board.nextgen
		expect(cell).to be_dead
	end

	specify 'Rule #2: Any live cell with two or three live neighbours lives on to the next generation' do
		cell = Cell.new(board)
		cell_1 = cell.create_at(1,0)
		cell_2 = cell.create_at(-1,0)
		board.nextgen
		expect(cell).to be_alive
	end

	specify 'Rule #3: Any live cell with more than three live neighbours dies' do
		cell = Cell.new(board)
		cell_1 = cell.create_at(1,0)
		cell_2 = cell.create_at(-1,0)
		cell_3 = cell.create_at(1,1)
		cell_4 = cell.create_at(1,-1)
		board.nextgen
		expect(cell).to be_dead
	end
	
	specify 'Rule #4: Any dead cell with exactly three live neighbours becomes a live cell' do
		cell = Cell.new(board)
		cell.die
		expect(cell).to be_dead
		cell_1 = cell.create_at(1,0)
		cell_2 = cell.create_at(-1, 0)
		cell_3 = cell.create_at(-1, 1)
		board.nextgen
		expect(cell).to be_alive
	end

	describe 'file operations' do
		
		specify 'example matrix import' do 
			filename = "example_matrix.txt"
			rows = ["**....***", "*.*.*..*.", ".**....*.", "**..*....", "***..***."]
			File.write(filename, rows.join("\n"), mode: "w")

			board.import(filename)
			
			expect(board.rows.count).to eq(5)
			expect(board.row_length).to eq(9)

			File.delete(filename) if File.exist?(filename)
		end

		specify 'example matrix import and create_life - cells count' do 
			filename = "example_matrix.txt"
			rows = ["**....***", "*.*.*..*.", ".**....*.", "**..*....", "***..***."]
			File.write(filename, rows.join("\n"), mode: "w")
			
			board.import(filename)
			board.create_life			
			
			expect(board.cells.count).to eq(45)
			
			File.delete(filename) if File.exist?(filename)
		end

		specify 'matrix import only allowed chars (*.)' do
			board.import("first_generation.txt").each do |row|
				expect(board.chars_valid?(row)).to be true
			end
		end

		specify 'matrix import only allowed chars (*.) raise an exception if other chars are present' do
			board.import("broken_matrix.txt")
			expect { board.create_life }.to raise_error(RuntimeError, 'Generation Matrix is not valid')
		end

		specify 'matrix import.create_life raising an exception with an invalid matrix' do 
			board.import("broken_matrix.txt")
			expect { board.create_life }.to raise_error(RuntimeError, 'Generation Matrix is not valid')
	  end

		specify 'matrix import.create_life not raising an exception with a valid matrix' do 
			board.import("first_generation.txt")
			expect { board.create_life }.not_to raise_error
		end


	end

end
